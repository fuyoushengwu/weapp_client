<template>
  <view class="container">
    <filterBar @refresh.user="refresh" :goods.sync="goodList" />
    <view wx:if="{{goodList.length>0}}">
      <!--矩阵商品列表模块-->
      <goodGridList :goodList.sync="goodList"></goodGridList>
      <!--加载更多时动画-->
      <bottomLoadMore :show.sync="gettingmore"></bottomLoadMore>
      <!--暂无数据显示-->
      <placeholder :show.sync="is_empty" message="暂无发现数据"></placeholder>
    </view>
  </view>
</template>
<script>
import wepy from 'wepy';
import FilterBar from '../components/filter_bar';
import GoodGridList from '../components/good_grid_list';
import BottomLoadMore from '../components/common/bottomLoadMore';
import Placeholder from '../components/common/placeholder';
import GoodAPI from '../api/goodapi';
import tip from '../utils/tip';
export default class Search extends wepy.page {
  config = {
    navigationBarTitleText: '搜索',
    enablePullDownRefresh: true
  };

  components = {
    filterBar: FilterBar,
    goodGridList: GoodGridList,
    bottomLoadMore: BottomLoadMore,
    placeholder: Placeholder
  };

  data = {
    // 当前商品对应的条目ID
    classifyId: undefined,
    queryParam: {},
    // 商品列表
    goodList: [],
    totalpage: 1,
    currentPage: 1,
    pageSize: 15,
    // 商品列表为空
    is_empyt: true,
    // 是否展示正在加载页面
    gettingmore: false,
    // 防止重复加载
    inRequesting: false
  };

  setTitle(title) {
    wepy.setNavigationBarTitle({
      title: title
    });
  }

  onLoad(option) {
    this.setTitle(option.title);

    if (option.classify_id != undefined) {
      this.classifyId = option.classify_id;
    } else if (option.topClassifyid != undefined) {
      this.classifyId = option.topClassifyid;
    }

    this.getClassifyGoods(true, false, false, this.classifyId, this.queryParam);
  }

  onPullDownRefresh() {
    this.getClassifyGoods(false, true, false, this.classifyId, this.queryParam);
  }

  onReachBottom() {
    this.getClassifyGoods(false, false, true, this.classifyId, this.queryParam);
  }

  getClassifyGoods(init, pulldown, more, classifyId, queryParam = {}) {
    if (this.inRequesting) {
      return;
    }
    if (more) {
      if (this.currentPage >= this.totalpage) {
        tip.success('已经到底啦');
        return;
      } else {
        this.gettingmore = true;
        this.currentPage++;
      }
    }

    if (init || pulldown) {
      this.currentPage = 1;
      this.totalpage = 1;
    }
    wx.showNavigationBarLoading();
    this.inRequesting = true;
    let that = this;
    GoodAPI.getClassifyGoodList(
      classifyId,
      queryParam.packFilter,
      queryParam.levelFilter,
      queryParam.orderType,
      queryParam.orderValue,
      this.currentPage,
      this.pageSize
    ).then(res => {
      that.gettingmore = false;
      that.inRequesting = false;
      wx.hideNavigationBarLoading();
      if (pulldown) {
        wx.stopPullDownRefresh();
      }
      let response = res.data || {};
      if (response.code != 200) {
        return;
      }

      let getClassifyGoodListResponse = response.data;
      that.currentPage = getClassifyGoodListResponse.currentPage;
      that.totalpage = getClassifyGoodListResponse.totalpage;
      if (init || pulldown) {
        that.goodList = getClassifyGoodListResponse.dataList;
      } else {
        that.goodList = [
          ...that.goodList,
          ...getClassifyGoodListResponse.dataList
        ];
      }
      if (that.goodList.length != 0) {
        that.is_empty = false;
      } else {
        that.is_empty = true;
      }
      that.$apply();
    });
  }

  methods = {
    refresh(queryParam) {
      this.queryParam = queryParam;
      this.getClassifyGoods(true, false, false, this.classifyId, queryParam);
    }
  };
}
</script>

<style lang="less">
.history {
  padding: 20px 27px;
}
.doc {
  color: #999;
  font-size: 26rpx;
}
.lable {
  margin-top: 20rpx;
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  margin-left: -20rpx;
  .child {
    background: #dedede;
    padding: 10rpx 20rpx;
    border-radius: 300rpx;
    margin-left: 20rpx;
    font-size: 26rpx;
    margin-top: 5rpx;
    color: #000;
  }
}
.btn_box {
  width: 377rpx;
  margin: 0 auto;
  padding-top: 88rpx;
  .button {
    color: #999;
  }
}
.active {
  border: 1px solid #f23737;
  color: #f23737;
}
</style>
