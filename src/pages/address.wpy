<template>
  <view>
    <view class="{{currentpage==0?'':'hidden'}}">
      <addressList :addressList.sync="addressList"></addressList>
    </view>
    <view class="{{currentpage==1?'':'hidden'}}">
      <addressAdd/>
    </view>
    <view class="{{currentpage==2?'':'hidden'}}">
      <addressEdit/>
    </view>
  </view>
</template>
<script>
import wepy from 'wepy';
import AddressList from '../components/address_list';
import AddressAdd from '../components/address_add';
import AddressEdit from '../components/address_edit';
import GlobalData from '../conf/globalData';
import userapi from '../api/userapi';
export default class Address extends wepy.page {
  config = {
    navigationBarTitleText: '收货地址'
  };
  data = {
    addressList: [],
    // 显示当前组件 0 列表 1新增 2编辑
    currentpage: 0,
    // 哪个页面跳转过来
    type: ''
  };
  components = {
    addressList: AddressList,
    addressAdd: AddressAdd,
    addressEdit: AddressEdit
  };

  onLoad(option) {
    this.type = option.type;
    this.$invoke('addressList', 'setShowType', this.type);
    this.$invoke('addressList', 'setShopOrderId', option.shoporderid);
    if (!GlobalData.initRecieveAddressList) {
      this.loadUserRecieveAddress();
    }
  }

  onShow() {
    // 当添加/修改收货地址后，重新进入该页面后,需要刷新数据
    if (GlobalData.initRecieveAddressList) {
      this.addressList = GlobalData.getRecieveAddressList();
      this.$invoke('addressList', 'setRecieveAddressList', this.addressList);
    }
  }

  loadUserRecieveAddress() {
    let that = this;
    userapi.getUserRecieveAddressList(GlobalData.getUserId()).then(res => {
      let response = res.data || {};
      if (response.code == 200) {
        that.addressList = response.data;
        GlobalData.setRecieveAddressList(that.addressList);
        that.$invoke('addressList', 'setRecieveAddressList', that.addressList);
      }
    });
  }

  editRecieveAddress(addressid) {
    this.addressList.forEach(element => {
      if (element.id == addressid) {
        this.$invoke('addressEdit', 'refresh', element);
      }
    });
  }

  events = {
    deleteRecieveAddress(addressid) {
      let tmpList = [];
      this.addressList.forEach(element => {
        if (element.id != addressid) {
          tmpList.push(element);
        }
      });
      this.addressList = tmpList;
      GlobalData.setRecieveAddressList(this.addressList);
    },
    addRecieveAddress(recieveAddress) {
      let isDef = recieveAddress.def;
      let tmpList = [recieveAddress];
      this.addressList.forEach(element => {
        if (isDef) {
          element.def = false;
        }
        tmpList.push(element);
      });
      this.addressList = tmpList;
      GlobalData.setRecieveAddressList(this.addressList);
    },
    updateRecieveAddress(recieveAddress) {
      let isDef = recieveAddress.def;
      let tmpList = [];
      this.addressList.forEach(element => {
        if (element.id == recieveAddress.id) {
          tmpList.push(recieveAddress);
        } else {
          if (isDef) {
            element.def = false;
          }
          tmpList.push(element);
        }
      });
      this.addressList = tmpList;
      GlobalData.setRecieveAddressList(this.addressList);
    },
    currentpage(cur, addressid) {
      this.currentpage = cur;
      if (cur != 1 && cur != 0) {
        this.editRecieveAddress(addressid);
      }
    }
  };
}
</script>
<style lang="less">
.hidden {
  display: none;
}
</style>
