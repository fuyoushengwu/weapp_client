<template>
  <view>
    <view class="goodsList">
      <repeat for="{{shopCartList}}" key="index" index="index" item="item">
        <view class="list_box">
          <swipeDelete :swipeData="item" @delItem.user="deleteShopCartItem">
            <view class="goods-info">
              <icon
                class="icon-check"
                type="success"
                color="{{item.checked?'red':'rgb(153,153,153)'}}"
                @tap.stop="checkItem({{index}},{{item.id}})"
                size="20"
              />
              <view class="img-box">
                <image class="img" src="{{item.good.coverImg}}"/>
              </view>
              <view class="text-box">
                <view class="goods-title">
                  <navigator url="/pages/good_detail?good_id={{item.good.id}}">{{item.good.name}}</navigator>
                </view>
                <view class="goods-price">{{item.good.price}}</view>
                <view class="buy-num">
                  <view class="jian-btn" @tap.stop="decreaseItemCount({{index}},{{item.id}})">-</view>
                  <input type="number" value="{{item.count}}" disabled/>
                  <view class="jia-btn" @tap.stop="increaseItemCount({{index}},{{item.id}})">+</view>
                </view>
              </view>
            </view>
          </swipeDelete>
        </view>
      </repeat>
    </view>

    <view class="empty_cart" wx:if="{{shopCartList.length==0}}">
      <image src="../images/empty_cart.png" class="empyt_cart_img"/>
      <view class="empty_cart_text">购物车还是空的</view>
      <view class="shop_btn">
        <view class="block btn_group">
          <view class="btn get_store" @tap="goClassify">去逛逛</view>
        </view>
      </view>
    </view>

    <view class="jiesuan-box" wx:if="{{shopCartList.length>0}}">
      <view class="left-price">
        <view @tap.stop="triggerCheckedAll" class="all_select_box">
          <icon type="success" size="20" color="{{allChecked?'red':'rgb(153,153,153)'}}"/>
          <view class="all_select">全选</view>
        </view>
        <view class="total">合计:￥{{totalPrice}}</view>
      </view>
      <view class="to-pay-btn" @tap="buy">购买</view>
    </view>
  </view>
</template>
<script>
import wepy from 'wepy';
import swipeDelete from './common/swipe-delete';
import GlobalData from '../conf/globalData';
import ShopCartAPI from '../api/shopcartapi';
import tip from '../utils/tip';
export default class shopCart extends wepy.component {
  data = {
    shopCartList: [],
    // 购物车中商品合计价格
    totalPrice: 0,
    // 购物车中商品是否全选
    allChecked: true,
    operating: false
  };

  components = {
    swipeDelete
  };

  updateShopCartList(list) {
    if (!list) {
      return;
    }
    this.shopCartList = list;
    GlobalData.setShopCartList(this.shopCartList);
    this.allChecked = true;
    this.totalPrice = 0;
    this.shopCartList.forEach(element => {
      if (!element.checked) {
        this.allChecked = false;
      } else {
        this.totalPrice += element.count * element.good.price;
      }
    });
    this.$apply();
  }

  updateShopCartItemCount(shopCartId, index, oriCount, targetCount) {
    let that = this;
    ShopCartAPI.updateShopCartItemCount(
      GlobalData.getUsername(),
      shopCartId,
      targetCount
    ).then(res => {
      that.operating = false;
      let response = res.data || {};
      if (response.code != 200) {
        tip.error('修改商品数量失败');
        that.shopCartList[index].count = oriCount;
        that.updateShopCartList(that.shopCartList);
      }
    });

    this.shopCartList[index].count = targetCount;
    this.updateShopCartList(this.shopCartList);
  }

  checkShopCart(shopCartId, itemIndex, oriCheckStatus) {
    let targetCheckStatus = !oriCheckStatus;
    let that = this;
    ShopCartAPI.checkShopCartItem(
      GlobalData.getUsername(),
      shopCartId,
      targetCheckStatus
    ).then(res => {
      that.operating = false;
      let response = res.data || {};
      if (response.code != 200) {
        tip.error('勾选失败');
        that.shopCartList[itemIndex].checked = oriCheckStatus;
        that.updateShopCartList(that.shopCartList);
      }
    });

    this.shopCartList[itemIndex].checked = targetCheckStatus;
    this.updateShopCartList(this.shopCartList);
  }

  triggerAllShopCarts() {
    let oriCheckStatus = this.allChecked;
    let targetCheckStatus = !oriCheckStatus;
    let that = this;
    ShopCartAPI.checkAllShopCartItem(
      GlobalData.getUsername(),
      targetCheckStatus
    ).then(res => {
      that.operating = false;
      let response = res.data || {};
      if (response.code != 200) {
        tip.error('全选失败');
        that.shopCartList.forEach(element => {
          element.checked = oriCheckStatus;
        });
        that.updateShopCartList(that.shopCartList);
      }
    });

    this.shopCartList.forEach(element => {
      element.checked = targetCheckStatus;
    });
    this.updateShopCartList(this.shopCartList);
  }

  deleteShopCart(shopCart) {
    let that = this;
    ShopCartAPI.deleteShopCartItem(GlobalData.getUsername(), shopCart.id).then(
      res => {
        that.operating = false;
        let response = res.data || {};
        if (response.code == 200) {
          let retList = [];
          that.shopCartList.forEach(element => {
            if (element.id != shopCart.id) {
              retList.push(element);
            }
          });
          that.updateShopCartList(retList);
        } else {
          tip.error('删除失败');
        }
      }
    );
  }

  methods = {
    goClassify() {
      wepy.switchTab({
        url: '/pages/classify'
      });
    },
    buy() {
      wepy.navigateTo({
        url: '/pages/confirm_order'
      });
    },
    triggerCheckedAll() {
      if (this.operating) {
        return;
      }
      this.operating = true;
      this.triggerAllShopCarts();
    },
    deleteShopCartItem(shopCart) {
      if (this.operating) {
        return;
      }
      this.operating = true;
      this.deleteShopCart(shopCart);
    },
    checkItem(index, shopCartId) {
      if (this.operating) {
        return;
      }
      this.operating = true;
      this.checkShopCart(shopCartId, index, this.shopCartList[index].checked);
    },
    decreaseItemCount(index, shopCartId) {
      if (this.operating) {
        return;
      }
      this.operating = true;
      let count = this.shopCartList[index].count;
      if (count > 1) {
        count--;
      } else {
        this.operating = false;
        return;
      }
      this.updateShopCartItemCount(shopCartId, index, count + 1, count);
    },
    increaseItemCount(index, shopCartId) {
      if (this.operating) {
        return;
      }
      this.operating = true;
      let count = this.shopCartList[index].count;
      count++;
      this.updateShopCartItemCount(shopCartId, index, count - 1, count);
    }
  };
}
</script>
<style lang="less">
.goodsList {
  margin-bottom: 100rpx;
  .list_box {
    height: 250rpx;
    .goods-info {
      border-bottom: 1px solid #eee;
      display: flex;
      justify-content: space-between;
      padding: 70rpx 0 30rpx 0rpx;
      box-sizing: border-box;
      align-items: center;
      position: relative;
      .img-box {
        width: 160rpx;
        height: 160rpx;
        overflow: hidden;
        margin-right: 20rpx;
        background-color: #d8d8d8;
        margin-left: 100rpx;
        .img {
          width: 160rpx;
          height: 160rpx;
        }
      }
      .text-box {
        width: 440rpx;
        position: relative;
        .goods-title {
          font-size: 28rpx;
          color: #000;
          text-overflow: ellipsis;
          white-space: nowrap;
          overflow: hidden;
          padding: 10rpx 20rpx 5rpx 0;
        }
        .goods-price {
          font-size: 26rpx;
          color: #e64340;
        }
        .buy-num {
          width: 164rpx;
          height: 48rpx;
          line-height: 48rpx;
          position: absolute;
          right: 30rpx;
          bottom: 0;
          display: flex;
          /*justify-content: space-between;*/
          font-size: 24rpx;
          text-align: center;
          .jian-btn {
            width: 48rpx;
            height: 100%;
            border-left: 1rpx solid #ccc;
            border-bottom: 1rpx solid #ccc;
            border-top: 1rpx solid #ccc;
            border-bottom-left-radius: 6rpx;
            border-top-left-radius: 6rpx;
          }
          .jian-btn.disabled {
            background-color: #f5f5f9;
            border-left: 1rpx solid #eee;
            border-bottom: 1rpx solid #eee;
            border-top: 1rpx solid #eee;
            color: #ccc;
          }
          .jia-btn {
            width: 48rpx;
            height: 100%;
            border-right: 1rpx solid #ccc;
            border-bottom: 1rpx solid #ccc;
            border-top: 1rpx solid #ccc;
            border-bottom-right-radius: 6rpx;
            border-top-right-radius: 6rpx;
          }
          input {
            width: 68rpx;
            height: 48rpx;
            min-height: 48rpx;
            text-align: center;
            font-size: 24rpx;
            border: 1rpx solid #ccc;
          }
          .jia-btn.disabled {
            background-color: #f5f5f9;
            border-right: 1rpx solid #eee;
            border-bottom: 1rpx solid #eee;
            border-top: 1rpx solid #eee;
            color: #ccc;
          }
        }
      }
    }
  }
}
.empty_cart {
  margin-top: 100rpx;
  .empty_cart_img {
    width: 220rpx;
    height: 177rpx;
    display: block;
    margin: 0 auto;
  }
  .empty_cart_text {
    font-size: 32rpx;
    color: #999;
    margin-top: 20rpx;
    text-align: center;
  }
  .shop_btn {
    display: flex;
    width: 100%;
    .block {
      margin: 0 auto;
      text-align: center;
      display: flex;
      align-items: center;
    }
    .btn_group {
      display: flex;
      align-items: center;
      padding-top: 100rpx;
      .btn {
        font-size: 30rpx;
        padding: 22rpx 55rpx;
        text-align: center;
        margin: 0 auto;
        width: 100%;
        -moz-border-radius: 10rpx;
        /* Firefox */
        -webkit-border-radius: 10rpx;
        /* Safari 和 Chrome */
        border-radius: 10rpx;
        /* Opera 10.5+, 以及使用了IE-CSS3的IE浏览器 */
      }
      .get_store {
        background: #ed601b;
        color: #fff;
        margin-left: 1rpx;
      }
    }
  }
}
.jiesuan-box {
  display: flex;
  justify-content: space-between;
  width: 100%;
  height: 100rpx;
  position: fixed;
  bottom: 0;
  left: 0;
  border-bottom: 1px solid #eee;
  border-top: 1px solid #eee;
  background-color: #fff;
  z-index: 9999;
  .left-price {
    display: flex;
    width: 510rpx;
    justify-content: space-between;
    padding: 0 30rpx 0 20rpx;
    font-size: 28rpx;
    box-sizing: border-box;
    align-items: center;
    .all_select_box {
      width: 200rpx;
      height: 100%;
      display: flex;
      align-items: center;
      .all_select {
        flex: 1;
        padding-left: 10rpx;
      }
    }
    .total {
      color: #e64340;
    }
  }
  .to-pay-btn {
    width: 240rpx;
    text-align: center;
    line-height: 100rpx;
    background-color: #e64340;
    font-size: 32rpx;
    color: #ffffff;
  }
  .to-pay-btn.no-select {
    background-color: #ccc;
  }
}
</style>
